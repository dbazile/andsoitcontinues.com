{
  "article": {
    "abstract": "<p>Sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>",
    "body": "<h2>Lorem Ipsum Dolor</h2><blockquote><p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.<span class=\"quoth\">Gratuitous Quotation</span></p></blockquote><h2>Quis exercitation ullamco laboris?</h2><p>Lorem ipsum <code>dolor sit amet</code>, consectetur <strong>adipiscing elit</strong>, sed do eiusmod tempor incididunt ut labore <em>et dolore magna aliqua</em>.</p><p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n<h3>References:</h3><ol>\t<li><a href=\"#\" class=\"external\">Officia deserunt mollit anim id est laborum</a></li>\t<li><a href=\"#\" class=\"external\">Ad minim veniam</a></li>\t<li><a href=\"#\" class=\"external\">Laboris nisi ut aliquip</a></li></ol>\n\t\t\t\t\t\n<hr/>\n<h3>Python</h3>\n\n<pre><code class=\"python\">@requires_authorization\ndef somefunc(param1='', param2=0):\n    r'''A docstring'''\n    if param1 > param2: # interesting\n        print 'Gre\\'ater'\n    return (param2 - param1 + 1 + 0b10l) or None\n\nclass SomeClass:\n    pass\n\n>>> message = '''interpreter\n... prompt'''</code></pre>\n\n\n<h3>Ruby</h3>\n\n<pre><code class='ruby'>class A &lt; B; def self.create(object = User) object end end\nclass Zebra; def inspect; \"X70363266830902\" end end\n\nmodule ABC::DEF\n  include Comparable\n\n  # @param test\n  # @return [String] nothing\n  def foo(test)\n    Thread.new do |blockvar|\n      ABC::DEF.reverse(:a_symbol, :'a symbol', :&lt;=&gt;, 'test' + ?\n)\n      answer = valid?4 &amp;&amp; valid?CONST &amp;&amp; ?A &amp;&amp; ?A.ord\n    end.join\n  end\n\n  def [](index) self[index] end\n  def ==(other) other == self end\nend\n\nanIdentifier = an_identifier\nConstant = 1\nrender action: :new\n\nstr =~ /^(?:foo)$/\nstr =~ %r{foo|bar|buz$}\nstr =~ %r!foo|bar$!\nstr =~ %r[foo|bar$]\nstr =~ %r((foo|bar)$)</code></pre>\n\n\n<h3>PHP</h3>\n\n<pre><code class=\"php\">require_once 'Zend/Uri/Http.php';\n\nnamespace LocationWeb;\n\ninterface Factory\n{\n    static function _factory();\n}\n\nabstract class URI extends BaseURI implements Factory\n{\n    abstract function test();\n\n    /**\n     * Returns a URI\n     *\n     * @return URI\n     */\n    static public function _factory($stats = array(), $uri = 'http')\n    {\n        echo __METHOD__;\n        $uri = explode(':', $uri, 0b10);\n        $schemeSpecific = isset($uri[1]) ? $uri[1] : '';\n        $desc = 'Multi\nline description';\n\n        // Security check\n        if (!ctype_alnum($scheme)) {\n            throw new Zend_Uri_Exception('Illegal scheme');\n        }\n\n        return [\n            'uri'   => $uri,\n            'value' => null,\n        ];\n    }\n}\n\n__halt_compiler () ; datahere\ndatahere\ndatahere */\ndatahere</code></pre>\n\n\n<h3>CSS</h3>\n\n<pre><code class=\"css\">@media screen and (-webkit-min-device-pixel-ratio: 0) {\n  body:first-of-type pre::after {\n    content: 'highlight: ' attr(class);\n  }\n  body {\n    background: linear-gradient(45deg, blue, red);\n  }\n}\n\n@import url('print.css');\n@page:right {\n margin: 1cm 2cm 1.3cm 4cm;\n}\n\n@font-face {\n  font-family: Chunkfive; src: url('Chunkfive.otf');\n}\n\ndiv.text,\n#content,\nli[lang=ru] {\n  font: Tahoma, Chunkfive, sans-serif;\n  background: url('hatch.png') /* wtf? */;  color: #F0F0F0 !important;\n  width: 100%;\n}</code></pre>\n\n\n<h3>JSON</h3>\n\n<pre><code class=\"json\">[\n  {\n    \"title\": \"apples\",\n    \"count\": [12000, 20000],\n    \"description\": {\"text\": \"...\", \"sensitive\": false}\n  },\n  {\n    \"title\": \"oranges\",\n    \"count\": [17500, null],\n    \"description\": {\"text\": \"...\", \"sensitive\": false}\n  }\n]</code></pre>\n\n\n<h3>JavaScript</h3>\n\n<pre><code class=\"javascript\">function $initHighlight(block, flags) {\n  try {\n    if (block.className.search(/\bno-highlight\b/) != -1)\n      return processBlock(block.function, true, 0x0F) + ' class=\"\"';\n  } catch (e) {\n    /* handle exception */\n    var e4x = \"\";\n  }\n  for (var i = 0 / 2; i &lt; classes.length; i++) { // \"0 / 2\" should not be parsed as regexp\n    if (checkCondition(classes[i]) === undefined)\n      return /d+[ /]/g;\n  }\n  console.log(Array.every(classes, Boolean));\n}</code></pre>\n\n\n<h3>Java</h3>\n\n<pre><code class=\"java\">/**\n * @author John Smith <john.smith@example.com>\n * @version 1.0\n*/\npackage l2f.gameserver.model;\n\nimport java.util.ArrayList;\n\npublic abstract class L2Character extends L2Object {\n  public static final Short ABNORMAL_EFFECT_BLEEDING = 0x0001; // not sure\n\n  public void moveTo(int x, int y, int z) {\n    _ai = null;\n    _log.warning(\"Should not be called\");\n    if (1 &gt; 5) {\n      return;\n    }\n  }\n\n  /** Task of AI notification */\n  @SuppressWarnings( { \"nls\", \"unqualified-field-access\", \"boxing\" })\n  public class NotifyAITask implements Runnable {\n    private final CtrlEvent _evt;\n\n    public void run() {\n      try {\n        getAI().notifyEvent(_evt, _evt.class, null);\n      } catch (Throwable t) {\n        t.printStackTrace();\n      }\n    }\n  }\n}</code></pre>\n\n\n\n<h3>Swift</h3>\n\n<pre><code class=\"swift\">extension MyClass : Interface {\n    class func unarchiveFromFile(file : A, (Int,Int) -> B) -> SKNode? {\n        let path: String = bundle.pathForResource(file, ofType: \"file\\(name + 5).txt\")\n        let funnyNumber = 3 + 0xC2.15p2 * (1_000_000.000_000_1 - 000123.456) + 0o21\n        var sceneData = NSData.dataWithContentsOfFile(path, options: .DataReadingMappedIfSafe, error: nil)\n        /* a comment /* with a nested comment */ and the end */\n    }\n    @objc override func shouldAutorotate() {\n        return true\n    }\n}</code></pre>\n\n<h3>Objective-C</h3>\n\n<pre><code class=\"objectivec\">//\n//  DecisionTableViewController.m\n//  ProsAndCons\n//\n//  Created by David Bazile on 7/1/14.\n//  Copyright (c) 2014 Dave. All rights reserved.\n//\n\n#import \"DecisionViewController.h\"\n#import \"Decision.h\"\n#import \"DecisionTableCell.h\"\n\n@interface DecisionViewController ()\n\n@end\n\n@implementation DecisionViewController\n\n/**\n * Constructor\n *\n */\n- (id)initWithStyle:(UITableViewStyle)style\n{\n\tself = [super initWithStyle:style];\n\tif (self) {\n\t\t// Custom initialization\n\t}\n\treturn self;\n}\n\n/**\n * View initializer\n */\n- (void)viewDidLoad\n{\n\t[super viewDidLoad];\n\tself.decisions = [[NSMutableArray alloc] init];\n\t[self.decisions addObject: [[Decision alloc] initWithTitle:@\"Learn how to juggle\" notes:@\"A completely arbitrary ridiculous goal\" pros:nil cons:nil]];\n\t[self.decisions addObject: [[Decision alloc] initWithTitle:@\"Move to a new city\" notes:@\"Looking for a change of venue\" pros:nil cons:nil]];\n\t[self.decisions addObject: [[Decision alloc] initWithTitle:@\"Wear a funny hat\" notes:@\"Seriously, it'd be fun\" pros:nil cons:nil]];\n}\n\n/**\n * Memory management hook\n */\n- (void)didReceiveMemoryWarning\n{\n\t[super didReceiveMemoryWarning];\n}\n\n/**\n * Returns the number of elements in a table\n */\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section\n{\n\treturn self.decisions.count;\n}\n\n/**\n * Draw each individual table row\n */\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n\tDecisionTableCell *cell = [tableView\n\t\t dequeueReusableCellWithIdentifier:@\"decision_row\"\n\t\t\t\t\t\t\t  forIndexPath:indexPath];\n\tif (nil == cell) {\n\t\tcell = [[DecisionTableCell alloc]\n\t\t\t\tinitWithStyle:UITableViewCellStyleDefault\n\t\t\t  reuseIdentifier:@\"decision_row\"];\n\t}\n\n\tint row = indexPath.row;\n\t[cell update:self.decisions[row]];\n\n\treturn cell;\n}\n\n@end\n</code></pre>\n\n\n\n<h3>SQL</h3>\n\n<pre><code class=\"sql\">BEGIN;\nCREATE TABLE \"topic\" (\n    \"id\" serial NOT NULL PRIMARY KEY,\n    \"forum_id\" integer NOT NULL,\n    \"subject\" varchar(255) NOT NULL\n);\nALTER TABLE \"topic\" ADD CONSTRAINT forum_id FOREIGN KEY (\"forum_id\") REFERENCES \"forum\" (\"id\");\n\n-- Initials\ninsert into \"topic\" (\"forum_id\", \"subject\") values (2, 'D''artagnian');\n\nselect count(*) from cicero_forum;\n\n-- this line lacks ; at the end to allow people to be sloppy and omit it in one-liners\nCOMMIT</code></pre>\n\n\n\n<h3>CoffeeScript</h3>\n\n<pre><code class=\"coffeescript\">\n# Configure HighlightJS\nhljs = window.hljs\nhljs.configure(tabReplace: \"\t\");\n\nactivateSyntaxHighlighting = () ->\n  console.debug '[activateSyntaxHighlighting] Invoked'\n\n  for element in document.getElementsByTagName('pre')\n    console.debug 'element found', element\n\n    unformattedString = element.textContent.trim()\n    lines = unformattedString.split(\"\n\")\n    specification = lines[0].match(/^#!(w+)/)\n\n    # Search for a language specification\n    language = null;\n    if (specification)\n      language = specification[1]\n      unformattedString = lines.slice(1).join(\"\n\").trim()\n\n    # Process the code block with highlight.js\n    if language\n      results = hljs.highlight(language, unformattedString)\n    else\n      results = hljs.highlightAuto(unformattedString)\n\n    # Print the highlighted code\n    if results.language\n      element.innerHTML = \"\"\"<code class=\"#{results.language}\">#{results.value}</code>\"\"\"\n    else\n      console.warn('highlight.js could not determine the language of the following code block:');\n      console.debug(unformattedString);\n\napp.ArticleRoute = Ember.Route.extend\n  activate: ->\n    activateSyntaxHighlighting()\n\n\napp.ArticleView = Ember.View.extend\n  didInsertElement: ->\n    activateSyntaxHighlighting()\n</code></pre>\n\n\n\n<h3>Diff file</h3>\n\n<pre><code class=\"diff\">\nIndex: languages/ini.js\n===================================================================\n--- languages/ini.js    (revision 199)\n+++ languages/ini.js    (revision 200)\n@@ -1,8 +1,7 @@\n hljs.LANGUAGES.ini =\n {\n   case_insensitive: true,\n-  defaultMode:\n-  {\n+  defaultMode: {\n     contains: ['comment', 'title', 'setting'],\n     illegal: '[^\\s]'\n   },\n\n*** /path/to/original timestamp\n--- /path/to/new      timestamp\n***************\n*** 1,3 ****\n--- 1,9 ----\n+ This is an important\n+ notice! It should\n+ therefore be located at\n+ the beginning of this\n+ document!\n\n! compress the size of the\n! changes.\n\n  It is important to spell</code></pre>\n\n\n\n<h3>BASH</h3>\n\n<pre><code class=\"bash\">#!/bin/bash\n\n###### BEGIN CONFIG\nACCEPTED_HOSTS=\"/root/.hag_accepted.conf\"\nBE_VERBOSE=false\n###### END CONFIG\n\nif [ \"$UID\" -ne 0 ]\nthen\n echo \"Superuser rights is required\"\n echo 'Printing the # sign'\n exit 2\nfi\n\nif test $# -eq 0\nthen\nelif test [ $1 == 'start' ]\nelse\nfi\n\ngenApacheConf(){\n if [[ \"$2\" = \"www\" ]]\n then\n  full_domain=$1\n else\n  full_domain=$2.$1\n fi\n host_root=\"${APACHE_HOME_DIR}$1/$2/$(title)\"\n echo -e \"# Host $1/$2 :\"\n}</code></pre>",
    "id": "example-blog-post",
    "postedOn": "2014-06-17T12:00:00-04:00",
    "subject": "Example Blog Post",
    "tags": [
      "lorem ipsum",
      "dolor"
    ],
    "type": "text"
  }
}
